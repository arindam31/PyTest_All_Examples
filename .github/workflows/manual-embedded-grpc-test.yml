name: gRPC Test with Pytest and allure

on:
  workflow_dispatch: # Manual trigger from GitHub UI

env:
  REPORT_SUBFOLDER: embedded_device_testing

jobs:
  grpc-test:
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r embedded_device_testing/product/requirements.txt
          pip install allure-pytest

      - name: Start gRPC server in background and wait for health
        working-directory: embedded_device_testing/product
        run: |
          python -m servers.device_server &
          echo $! > server_pid.txt

          echo "Waiting for gRPC server health check..."

          python ../scripts/wait_for_grpc.py || (
            echo "Server failed health check. Killing server..."
            kill $(cat server_pid.txt)
            exit 1
          )

      - name: Clean previous Allure results
        working-directory: embedded_device_testing/product
        run: rm -rf allure-results allure-report

      - name: Run Pytest with Allure
        working-directory: ./embedded_device_testing/product
        run: python -m pytest --alluredir=allure-results

      - name: Stop gRPC server
        working-directory: embedded_device_testing/product
        run: |
          kill $(cat server_pid.txt)

      - name: Install Homebrew and Allure CLI, generate Allure report
        shell: bash
        working-directory: embedded_device_testing/product
        run: |
          # Install Homebrew
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

          # Capture the brew environment variables and append them to $GITHUB_ENV
          /home/linuxbrew/.linuxbrew/bin/brew shellenv >> $GITHUB_ENV
          # Evaluate in current shell for immediate use
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Install allure CLI
          brew install allure

          # Verify allure installation
          allure --version

          # Generate Allure report (paths relative to working-directory)
          allure generate allure-results --clean -o ../../allure-report/${REPORT_SUBFOLDER}

      - name: Upload Allure HTML Report
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report/${{ env.REPORT_SUBFOLDER }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
